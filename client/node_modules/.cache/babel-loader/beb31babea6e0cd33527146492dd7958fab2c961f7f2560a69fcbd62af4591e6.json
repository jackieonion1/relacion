{"ast":null,"code":"// Simple IndexedDB-based photo cache with LRU for standard images\nconst DB_NAME = 'photo-cache-v1';\nconst DB_VERSION = 1;\nconst THUMBS = 'thumbs';\nconst ORIG = 'orig';\nfunction openDB() {\n  return new Promise((resolve, reject) => {\n    const req = indexedDB.open(DB_NAME, DB_VERSION);\n    req.onupgradeneeded = () => {\n      const db = req.result;\n      if (!db.objectStoreNames.contains(THUMBS)) {\n        db.createObjectStore(THUMBS, {\n          keyPath: 'id'\n        }); // { id, blob }\n      }\n      if (!db.objectStoreNames.contains(ORIG)) {\n        const store = db.createObjectStore(ORIG, {\n          keyPath: 'id'\n        }); // { id, blob, ts }\n        store.createIndex('ts', 'ts');\n      }\n    };\n    req.onsuccess = () => resolve(req.result);\n    req.onerror = () => reject(req.error);\n  });\n}\nfunction txStore(db, name, mode = 'readonly') {\n  const tx = db.transaction(name, mode);\n  return [tx, tx.objectStore(name)];\n}\nasync function get(storeName, id) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readonly');\n    const req = store.get(id);\n    req.onsuccess = () => resolve(req.result || null);\n    req.onerror = () => reject(req.error);\n  });\n}\nasync function set(storeName, value) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readwrite');\n    const req = store.put(value);\n    req.onsuccess = () => resolve();\n    req.onerror = () => reject(req.error);\n  });\n}\nasync function del(storeName, key) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readwrite');\n    const req = store.delete(key);\n    req.onsuccess = () => resolve();\n    req.onerror = () => reject(req.error);\n  });\n}\nasync function count(storeName) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readonly');\n    const req = store.count();\n    req.onsuccess = () => resolve(req.result || 0);\n    req.onerror = () => reject(req.error);\n  });\n}\nexport async function getThumb(id) {\n  const rec = await get(THUMBS, id);\n  return rec ? rec.blob : null;\n}\nexport async function putThumb(id, blob) {\n  await set(THUMBS, {\n    id,\n    blob\n  });\n}\nexport async function getOrig(id) {\n  const rec = await get(ORIG, id);\n  if (rec) {\n    // touch LRU\n    await set(ORIG, {\n      ...rec,\n      ts: Date.now()\n    });\n    return rec.blob;\n  }\n  return null;\n}\nexport async function putOrig(id, blob) {\n  await set(ORIG, {\n    id,\n    blob,\n    ts: Date.now()\n  });\n}\nexport async function pruneOrig(max = 20) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, ORIG, 'readwrite');\n    const idx = store.index('ts');\n    const countReq = store.count();\n    countReq.onsuccess = () => {\n      const total = countReq.result || 0;\n      const toDelete = Math.max(0, total - max);\n      if (toDelete <= 0) return resolve();\n      let removed = 0;\n      const curReq = idx.openCursor();\n      curReq.onsuccess = () => {\n        const cursor = curReq.result;\n        if (cursor && removed < toDelete) {\n          store.delete(cursor.primaryKey);\n          removed += 1;\n          cursor.continue();\n        } else {\n          resolve();\n        }\n      };\n      curReq.onerror = () => reject(curReq.error);\n    };\n    countReq.onerror = () => reject(countReq.error);\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","THUMBS","ORIG","openDB","Promise","resolve","reject","req","indexedDB","open","onupgradeneeded","db","result","objectStoreNames","contains","createObjectStore","keyPath","store","createIndex","onsuccess","onerror","error","txStore","name","mode","tx","transaction","objectStore","get","storeName","id","set","value","put","del","key","delete","count","getThumb","rec","blob","putThumb","getOrig","ts","Date","now","putOrig","pruneOrig","max","idx","index","countReq","total","toDelete","Math","removed","curReq","openCursor","cursor","primaryKey","continue"],"sources":["/Users/sebastianfornelli/XcodeProjects/Relacion/CascadeProjects/windsurf-project/client/src/lib/photoCache.js"],"sourcesContent":["// Simple IndexedDB-based photo cache with LRU for standard images\nconst DB_NAME = 'photo-cache-v1';\nconst DB_VERSION = 1;\nconst THUMBS = 'thumbs';\nconst ORIG = 'orig';\n\nfunction openDB() {\n  return new Promise((resolve, reject) => {\n    const req = indexedDB.open(DB_NAME, DB_VERSION);\n    req.onupgradeneeded = () => {\n      const db = req.result;\n      if (!db.objectStoreNames.contains(THUMBS)) {\n        db.createObjectStore(THUMBS, { keyPath: 'id' }); // { id, blob }\n      }\n      if (!db.objectStoreNames.contains(ORIG)) {\n        const store = db.createObjectStore(ORIG, { keyPath: 'id' }); // { id, blob, ts }\n        store.createIndex('ts', 'ts');\n      }\n    };\n    req.onsuccess = () => resolve(req.result);\n    req.onerror = () => reject(req.error);\n  });\n}\n\nfunction txStore(db, name, mode = 'readonly') {\n  const tx = db.transaction(name, mode);\n  return [tx, tx.objectStore(name)];\n}\n\nasync function get(storeName, id) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readonly');\n    const req = store.get(id);\n    req.onsuccess = () => resolve(req.result || null);\n    req.onerror = () => reject(req.error);\n  });\n}\n\nasync function set(storeName, value) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readwrite');\n    const req = store.put(value);\n    req.onsuccess = () => resolve();\n    req.onerror = () => reject(req.error);\n  });\n}\n\nasync function del(storeName, key) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readwrite');\n    const req = store.delete(key);\n    req.onsuccess = () => resolve();\n    req.onerror = () => reject(req.error);\n  });\n}\n\nasync function count(storeName) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, storeName, 'readonly');\n    const req = store.count();\n    req.onsuccess = () => resolve(req.result || 0);\n    req.onerror = () => reject(req.error);\n  });\n}\n\nexport async function getThumb(id) {\n  const rec = await get(THUMBS, id);\n  return rec ? rec.blob : null;\n}\n\nexport async function putThumb(id, blob) {\n  await set(THUMBS, { id, blob });\n}\n\nexport async function getOrig(id) {\n  const rec = await get(ORIG, id);\n  if (rec) {\n    // touch LRU\n    await set(ORIG, { ...rec, ts: Date.now() });\n    return rec.blob;\n  }\n  return null;\n}\n\nexport async function putOrig(id, blob) {\n  await set(ORIG, { id, blob, ts: Date.now() });\n}\n\nexport async function pruneOrig(max = 20) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const [tx, store] = txStore(db, ORIG, 'readwrite');\n    const idx = store.index('ts');\n    const countReq = store.count();\n    countReq.onsuccess = () => {\n      const total = countReq.result || 0;\n      const toDelete = Math.max(0, total - max);\n      if (toDelete <= 0) return resolve();\n      let removed = 0;\n      const curReq = idx.openCursor();\n      curReq.onsuccess = () => {\n        const cursor = curReq.result;\n        if (cursor && removed < toDelete) {\n          store.delete(cursor.primaryKey);\n          removed += 1;\n          cursor.continue();\n        } else {\n          resolve();\n        }\n      };\n      curReq.onerror = () => reject(curReq.error);\n    };\n    countReq.onerror = () => reject(countReq.error);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}