{"ast":null,"code":"import { auth, db, storage, authReady } from './firebase';\nimport { getThumb, putThumb, getOrig, putOrig, pruneOrig } from './photoCache';\n\n// Helpers\nfunction genId() {\n  return `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 8)}`.toUpperCase();\n}\nasync function fileToCanvas(file) {\n  const img = document.createElement('img');\n  img.decoding = 'async';\n  img.loading = 'eager';\n  const url = URL.createObjectURL(file);\n  try {\n    await new Promise((res, rej) => {\n      img.onload = () => res();\n      img.onerror = rej;\n      img.src = url;\n    });\n  } finally {\n    URL.revokeObjectURL(url);\n  }\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  return {\n    img,\n    canvas,\n    ctx\n  };\n}\nfunction drawContain(img, max) {\n  const ratio = Math.min(max / img.width, max / img.height, 1);\n  const w = Math.round(img.width * ratio);\n  const h = Math.round(img.height * ratio);\n  return {\n    w,\n    h\n  };\n}\n\n// Wait for anonymous auth to be ready (avoid first-operation race)\nasync function waitAuth(timeout = 1200) {\n  if (!authReady) return;\n  try {\n    await Promise.race([authReady, new Promise(resolve => setTimeout(resolve, timeout))]);\n  } catch {}\n}\nasync function resizeToBlob(file, maxSize, quality = 0.85) {\n  const {\n    img,\n    canvas,\n    ctx\n  } = await fileToCanvas(file);\n  const {\n    w,\n    h\n  } = drawContain(img, maxSize);\n  canvas.width = w;\n  canvas.height = h;\n  ctx.drawImage(img, 0, 0, w, h);\n  const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', quality));\n  return blob;\n}\n\n// Local fallback store for metadata\nfunction localKey(pairId) {\n  return `photos:${pairId}`;\n}\nfunction readLocalMeta(pairId) {\n  try {\n    return JSON.parse(localStorage.getItem(localKey(pairId)) || '[]');\n  } catch {\n    return [];\n  }\n}\nfunction writeLocalMeta(pairId, arr) {\n  try {\n    localStorage.setItem(localKey(pairId), JSON.stringify(arr));\n  } catch {}\n}\n\n// Firebase imports lazy to avoid bundling when not needed\nlet _fb;\nasync function fb() {\n  if (!_fb) {\n    try {\n      const {\n        ref,\n        uploadBytes,\n        getDownloadURL\n      } = await import('firebase/storage');\n      const {\n        collection,\n        doc,\n        setDoc,\n        getDoc,\n        getDocs,\n        query,\n        orderBy,\n        limit,\n        serverTimestamp\n      } = await import('firebase/firestore');\n      _fb = {\n        ref,\n        uploadBytes,\n        getDownloadURL,\n        collection,\n        doc,\n        setDoc,\n        getDoc,\n        getDocs,\n        query,\n        orderBy,\n        limit,\n        serverTimestamp\n      };\n    } catch (e) {\n      _fb = null;\n    }\n  }\n  return _fb;\n}\nexport async function listPhotos(pairId, max = 100) {\n  const items = [];\n  const fblib = await fb();\n  if (db && fblib) {\n    try {\n      await waitAuth();\n      const {\n        collection,\n        getDocs,\n        query,\n        orderBy,\n        limit\n      } = fblib;\n      const col = collection(db, 'pairs', pairId, 'photos');\n      const q = query(col, orderBy('createdAt', 'desc'), limit(max));\n      const snap = await getDocs(q);\n      for (const docSnap of snap.docs) {\n        var _data$createdAt, _data$createdAt$toMil;\n        const id = docSnap.id;\n        const data = docSnap.data();\n        // try cached thumb first\n        let thumbUrl = '';\n        const blob = await getThumb(id);\n        if (blob) {\n          thumbUrl = URL.createObjectURL(blob);\n        } else {\n          // fetch via saved URL (preferred) or from storage and cache\n          try {\n            const {\n              ref,\n              getDownloadURL,\n              collection,\n              doc,\n              setDoc\n            } = fblib;\n            let url = (data === null || data === void 0 ? void 0 : data.thumbUrl) || '';\n            if (!url) {\n              const tRef = ref(storage, `pairs/${pairId}/photos/${id}/thumb.jpg`);\n              url = await getDownloadURL(tRef);\n              // backfill thumbUrl into Firestore for cross-user access\n              try {\n                const dRef = doc(collection(db, 'pairs', pairId, 'photos'), id);\n                await setDoc(dRef, {\n                  thumbUrl: url\n                }, {\n                  merge: true\n                });\n              } catch {}\n            }\n            if (url) {\n              const resp = await fetch(url);\n              const b = await resp.blob();\n              await putThumb(id, b);\n              thumbUrl = URL.createObjectURL(b);\n            }\n          } catch {}\n        }\n        items.push({\n          id,\n          thumbUrl,\n          createdAt: (data === null || data === void 0 ? void 0 : (_data$createdAt = data.createdAt) === null || _data$createdAt === void 0 ? void 0 : (_data$createdAt$toMil = _data$createdAt.toMillis) === null || _data$createdAt$toMil === void 0 ? void 0 : _data$createdAt$toMil.call(_data$createdAt)) || Date.now()\n        });\n      }\n      return items;\n    } catch (e) {\n      // Fall back to local\n    }\n  }\n  // Local-only\n  const meta = readLocalMeta(pairId);\n  for (const m of meta) {\n    const b = await getThumb(m.id);\n    const thumbUrl = b ? URL.createObjectURL(b) : '';\n    items.push({\n      id: m.id,\n      thumbUrl,\n      createdAt: m.createdAt\n    });\n  }\n  // Sort desc by createdAt\n  items.sort((a, b) => (b.createdAt || 0) - (a.createdAt || 0));\n  return items.slice(0, max);\n}\nexport async function getOriginal(pairId, id) {\n  const cached = await getOrig(id);\n  if (cached) return cached;\n  const fblib = await fb();\n  if (storage && fblib) {\n    try {\n      await waitAuth();\n      const {\n        ref,\n        getDownloadURL,\n        collection,\n        doc,\n        getDoc,\n        setDoc\n      } = fblib;\n      // Prefer URL saved in Firestore (works across users)\n      let url = '';\n      try {\n        var _dsnap$exists, _dsnap$data;\n        const dRef = doc(collection(db, 'pairs', pairId, 'photos'), id);\n        const dsnap = await getDoc(dRef);\n        url = dsnap !== null && dsnap !== void 0 && (_dsnap$exists = dsnap.exists) !== null && _dsnap$exists !== void 0 && _dsnap$exists.call(dsnap) && (_dsnap$data = dsnap.data()) !== null && _dsnap$data !== void 0 && _dsnap$data.origUrl ? dsnap.data().origUrl : '';\n      } catch {}\n      if (!url) {\n        const oRef = ref(storage, `pairs/${pairId}/photos/${id}/orig.jpg`);\n        url = await getDownloadURL(oRef);\n        // Backfill origUrl into Firestore so other clients can access without Storage permissions\n        try {\n          const dRef = doc(collection(db, 'pairs', pairId, 'photos'), id);\n          await setDoc(dRef, {\n            origUrl: url\n          }, {\n            merge: true\n          });\n        } catch {}\n      }\n      if (url) {\n        const resp = await fetch(url);\n        const blob = await resp.blob();\n        await putOrig(id, blob);\n        await pruneOrig(20);\n        return blob;\n      }\n    } catch {}\n  }\n  return null;\n}\nexport async function uploadPhoto(pairId, file, identity = 'yo') {\n  const id = genId();\n  // make derivatives\n  const thumbBlob = await resizeToBlob(file, 480, 0.8);\n  const origBlob = await resizeToBlob(file, 1600, 0.9);\n\n  // cache locally\n  await putThumb(id, thumbBlob);\n  await putOrig(id, origBlob);\n  await pruneOrig(20);\n  const now = Date.now();\n  let remoteOk = false;\n  const fblib = await fb();\n  if (db && storage && fblib) {\n    try {\n      if (authReady) await authReady;\n      if (!(auth !== null && auth !== void 0 && auth.currentUser)) throw new Error('no-auth');\n      const {\n        ref,\n        uploadBytes,\n        collection,\n        doc,\n        setDoc,\n        serverTimestamp,\n        getDownloadURL\n      } = fblib;\n      const base = `pairs/${pairId}/photos/${id}`;\n      const tRef = ref(storage, `${base}/thumb.jpg`);\n      const oRef = ref(storage, `${base}/orig.jpg`);\n      await uploadBytes(tRef, thumbBlob, {\n        contentType: 'image/jpeg'\n      });\n      await uploadBytes(oRef, origBlob, {\n        contentType: 'image/jpeg'\n      });\n      const [thumbUrlRemote, origUrlRemote] = await Promise.all([getDownloadURL(tRef), getDownloadURL(oRef)]);\n      await setDoc(doc(collection(db, 'pairs', pairId, 'photos'), id), {\n        createdAt: serverTimestamp(),\n        createdBy: auth.currentUser.uid,\n        identity,\n        thumbUrl: thumbUrlRemote,\n        origUrl: origUrlRemote\n      });\n      remoteOk = true;\n    } catch (e) {\n      // ignore, we already cached locally\n    }\n  }\n\n  // local meta\n  const meta = readLocalMeta(pairId);\n  meta.push({\n    id,\n    createdAt: now,\n    identity\n  });\n  writeLocalMeta(pairId, meta);\n  return {\n    id,\n    thumbUrl: URL.createObjectURL(thumbBlob),\n    createdAt: now,\n    remote: remoteOk\n  };\n}","map":{"version":3,"names":["auth","db","storage","authReady","getThumb","putThumb","getOrig","putOrig","pruneOrig","genId","Date","now","toString","Math","random","slice","toUpperCase","fileToCanvas","file","img","document","createElement","decoding","loading","url","URL","createObjectURL","Promise","res","rej","onload","onerror","src","revokeObjectURL","canvas","ctx","getContext","drawContain","max","ratio","min","width","height","w","round","h","waitAuth","timeout","race","resolve","setTimeout","resizeToBlob","maxSize","quality","drawImage","blob","toBlob","localKey","pairId","readLocalMeta","JSON","parse","localStorage","getItem","writeLocalMeta","arr","setItem","stringify","_fb","fb","ref","uploadBytes","getDownloadURL","collection","doc","setDoc","getDoc","getDocs","query","orderBy","limit","serverTimestamp","e","listPhotos","items","fblib","col","q","snap","docSnap","docs","_data$createdAt","_data$createdAt$toMil","id","data","thumbUrl","tRef","dRef","merge","resp","fetch","b","push","createdAt","toMillis","call","meta","m","sort","a","getOriginal","cached","_dsnap$exists","_dsnap$data","dsnap","exists","origUrl","oRef","uploadPhoto","identity","thumbBlob","origBlob","remoteOk","currentUser","Error","base","contentType","thumbUrlRemote","origUrlRemote","all","createdBy","uid","remote"],"sources":["/Users/sebastianfornelli/XcodeProjects/Relacion/CascadeProjects/windsurf-project/client/src/lib/photos.js"],"sourcesContent":["import { auth, db, storage, authReady } from './firebase';\nimport { getThumb, putThumb, getOrig, putOrig, pruneOrig } from './photoCache';\n\n// Helpers\nfunction genId() {\n  return `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 8)}`.toUpperCase();\n}\n\nasync function fileToCanvas(file) {\n  const img = document.createElement('img');\n  img.decoding = 'async';\n  img.loading = 'eager';\n  const url = URL.createObjectURL(file);\n  try {\n    await new Promise((res, rej) => { img.onload = () => res(); img.onerror = rej; img.src = url; });\n  } finally {\n    URL.revokeObjectURL(url);\n  }\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  return { img, canvas, ctx };\n}\n\nfunction drawContain(img, max) {\n  const ratio = Math.min(max / img.width, max / img.height, 1);\n  const w = Math.round(img.width * ratio);\n  const h = Math.round(img.height * ratio);\n  return { w, h };\n}\n\n// Wait for anonymous auth to be ready (avoid first-operation race)\nasync function waitAuth(timeout = 1200) {\n  if (!authReady) return;\n  try {\n    await Promise.race([\n      authReady,\n      new Promise((resolve) => setTimeout(resolve, timeout)),\n    ]);\n  } catch {}\n}\n\nasync function resizeToBlob(file, maxSize, quality = 0.85) {\n  const { img, canvas, ctx } = await fileToCanvas(file);\n  const { w, h } = drawContain(img, maxSize);\n  canvas.width = w; canvas.height = h;\n  ctx.drawImage(img, 0, 0, w, h);\n  const blob = await new Promise((resolve) => canvas.toBlob(resolve, 'image/jpeg', quality));\n  return blob;\n}\n\n// Local fallback store for metadata\nfunction localKey(pairId) { return `photos:${pairId}`; }\nfunction readLocalMeta(pairId) {\n  try { return JSON.parse(localStorage.getItem(localKey(pairId)) || '[]'); } catch { return []; }\n}\nfunction writeLocalMeta(pairId, arr) {\n  try { localStorage.setItem(localKey(pairId), JSON.stringify(arr)); } catch {}\n}\n\n// Firebase imports lazy to avoid bundling when not needed\nlet _fb;\nasync function fb() {\n  if (!_fb) {\n    try {\n      const { ref, uploadBytes, getDownloadURL } = await import('firebase/storage');\n      const { collection, doc, setDoc, getDoc, getDocs, query, orderBy, limit, serverTimestamp } = await import('firebase/firestore');\n      _fb = { ref, uploadBytes, getDownloadURL, collection, doc, setDoc, getDoc, getDocs, query, orderBy, limit, serverTimestamp };\n    } catch (e) {\n      _fb = null;\n    }\n  }\n  return _fb;\n}\n\nexport async function listPhotos(pairId, max = 100) {\n  const items = [];\n  const fblib = await fb();\n  if (db && fblib) {\n    try {\n      await waitAuth();\n      const { collection, getDocs, query, orderBy, limit } = fblib;\n      const col = collection(db, 'pairs', pairId, 'photos');\n      const q = query(col, orderBy('createdAt', 'desc'), limit(max));\n      const snap = await getDocs(q);\n      for (const docSnap of snap.docs) {\n        const id = docSnap.id;\n        const data = docSnap.data();\n        // try cached thumb first\n        let thumbUrl = '';\n        const blob = await getThumb(id);\n        if (blob) {\n          thumbUrl = URL.createObjectURL(blob);\n        } else {\n          // fetch via saved URL (preferred) or from storage and cache\n          try {\n            const { ref, getDownloadURL, collection, doc, setDoc } = fblib;\n            let url = data?.thumbUrl || '';\n            if (!url) {\n              const tRef = ref(storage, `pairs/${pairId}/photos/${id}/thumb.jpg`);\n              url = await getDownloadURL(tRef);\n              // backfill thumbUrl into Firestore for cross-user access\n              try {\n                const dRef = doc(collection(db, 'pairs', pairId, 'photos'), id);\n                await setDoc(dRef, { thumbUrl: url }, { merge: true });\n              } catch {}\n            }\n            if (url) {\n              const resp = await fetch(url);\n              const b = await resp.blob();\n              await putThumb(id, b);\n              thumbUrl = URL.createObjectURL(b);\n            }\n          } catch {}\n        }\n        items.push({ id, thumbUrl, createdAt: data?.createdAt?.toMillis?.() || Date.now() });\n      }\n      return items;\n    } catch (e) {\n      // Fall back to local\n    }\n  }\n  // Local-only\n  const meta = readLocalMeta(pairId);\n  for (const m of meta) {\n    const b = await getThumb(m.id);\n    const thumbUrl = b ? URL.createObjectURL(b) : '';\n    items.push({ id: m.id, thumbUrl, createdAt: m.createdAt });\n  }\n  // Sort desc by createdAt\n  items.sort((a, b) => (b.createdAt || 0) - (a.createdAt || 0));\n  return items.slice(0, max);\n}\n\nexport async function getOriginal(pairId, id) {\n  const cached = await getOrig(id);\n  if (cached) return cached;\n  const fblib = await fb();\n  if (storage && fblib) {\n    try {\n      await waitAuth();\n      const { ref, getDownloadURL, collection, doc, getDoc, setDoc } = fblib;\n      // Prefer URL saved in Firestore (works across users)\n      let url = '';\n      try {\n        const dRef = doc(collection(db, 'pairs', pairId, 'photos'), id);\n        const dsnap = await getDoc(dRef);\n        url = dsnap?.exists?.() && dsnap.data()?.origUrl ? dsnap.data().origUrl : '';\n      } catch {}\n      if (!url) {\n        const oRef = ref(storage, `pairs/${pairId}/photos/${id}/orig.jpg`);\n        url = await getDownloadURL(oRef);\n        // Backfill origUrl into Firestore so other clients can access without Storage permissions\n        try {\n          const dRef = doc(collection(db, 'pairs', pairId, 'photos'), id);\n          await setDoc(dRef, { origUrl: url }, { merge: true });\n        } catch {}\n      }\n      if (url) {\n        const resp = await fetch(url);\n        const blob = await resp.blob();\n        await putOrig(id, blob);\n        await pruneOrig(20);\n        return blob;\n      }\n    } catch {}\n  }\n  return null;\n}\n\nexport async function uploadPhoto(pairId, file, identity = 'yo') {\n  const id = genId();\n  // make derivatives\n  const thumbBlob = await resizeToBlob(file, 480, 0.8);\n  const origBlob = await resizeToBlob(file, 1600, 0.9);\n\n  // cache locally\n  await putThumb(id, thumbBlob);\n  await putOrig(id, origBlob);\n  await pruneOrig(20);\n\n  const now = Date.now();\n  let remoteOk = false;\n\n  const fblib = await fb();\n  if (db && storage && fblib) {\n    try {\n      if (authReady) await authReady;\n      if (!auth?.currentUser) throw new Error('no-auth');\n      const { ref, uploadBytes, collection, doc, setDoc, serverTimestamp, getDownloadURL } = fblib;\n      const base = `pairs/${pairId}/photos/${id}`;\n      const tRef = ref(storage, `${base}/thumb.jpg`);\n      const oRef = ref(storage, `${base}/orig.jpg`);\n      await uploadBytes(tRef, thumbBlob, { contentType: 'image/jpeg' });\n      await uploadBytes(oRef, origBlob, { contentType: 'image/jpeg' });\n      const [thumbUrlRemote, origUrlRemote] = await Promise.all([\n        getDownloadURL(tRef),\n        getDownloadURL(oRef),\n      ]);\n      await setDoc(doc(collection(db, 'pairs', pairId, 'photos'), id), {\n        createdAt: serverTimestamp(),\n        createdBy: auth.currentUser.uid,\n        identity,\n        thumbUrl: thumbUrlRemote,\n        origUrl: origUrlRemote,\n      });\n      remoteOk = true;\n    } catch (e) {\n      // ignore, we already cached locally\n    }\n  }\n\n  // local meta\n  const meta = readLocalMeta(pairId);\n  meta.push({ id, createdAt: now, identity });\n  writeLocalMeta(pairId, meta);\n\n  return { id, thumbUrl: URL.createObjectURL(thumbBlob), createdAt: now, remote: remoteOk };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}