{"ast":null,"code":"import { db, auth, authReady } from './firebase';\nexport async function getMapState() {\n  try {\n    const pairId = localStorage.getItem('pairId') || '';\n    if (!pairId || !db) return 'home';\n    if (authReady) await authReady;\n    if (!(auth !== null && auth !== void 0 && auth.currentUser)) return 'home';\n    const {\n      doc,\n      getDoc\n    } = await import('firebase/firestore');\n    const snap = await getDoc(doc(db, 'pairs', pairId, 'mapState', 'current'));\n    if (snap.exists()) {\n      const data = snap.data();\n      return data.state || 'home';\n    }\n    return 'home';\n  } catch (e) {\n    console.error('Error getting map state:', e);\n    return localStorage.getItem('mapState') || 'home';\n  }\n}\nexport async function setMapState(state) {\n  try {\n    // Save locally first\n    localStorage.setItem('mapState', state);\n    const pairId = localStorage.getItem('pairId') || '';\n    if (!pairId || !db) return;\n    if (authReady) await authReady;\n    if (!(auth !== null && auth !== void 0 && auth.currentUser)) return;\n    const {\n      doc,\n      setDoc,\n      serverTimestamp\n    } = await import('firebase/firestore');\n    await setDoc(doc(db, 'pairs', pairId, 'mapState', 'current'), {\n      state,\n      updatedAt: serverTimestamp(),\n      updatedBy: auth.currentUser.uid\n    }, {\n      merge: true\n    });\n  } catch (e) {\n    console.error('Error setting map state:', e);\n    // Still save locally even if Firestore fails\n    localStorage.setItem('mapState', state);\n  }\n}\nexport function subscribeToMapState(callback) {\n  let unsubscribe = () => {};\n  (async () => {\n    try {\n      const pairId = localStorage.getItem('pairId') || '';\n      if (!pairId || !db) return;\n      if (authReady) await authReady;\n      if (!(auth !== null && auth !== void 0 && auth.currentUser)) return;\n      const {\n        doc,\n        onSnapshot\n      } = await import('firebase/firestore');\n      unsubscribe = onSnapshot(doc(db, 'pairs', pairId, 'mapState', 'current'), snap => {\n        if (snap.exists()) {\n          const data = snap.data();\n          const state = data.state || 'home';\n          localStorage.setItem('mapState', state);\n          callback(state);\n        }\n      }, error => {\n        console.error('Error listening to map state:', error);\n      });\n    } catch (e) {\n      console.error('Error subscribing to map state:', e);\n    }\n  })();\n  return () => unsubscribe();\n}","map":{"version":3,"names":["db","auth","authReady","getMapState","pairId","localStorage","getItem","currentUser","doc","getDoc","snap","exists","data","state","e","console","error","setMapState","setItem","setDoc","serverTimestamp","updatedAt","updatedBy","uid","merge","subscribeToMapState","callback","unsubscribe","onSnapshot"],"sources":["/Users/sebastianfornelli/XcodeProjects/Relacion/CascadeProjects/windsurf-project/client/src/lib/mapState.js"],"sourcesContent":["import { db, auth, authReady } from './firebase';\n\nexport async function getMapState() {\n  try {\n    const pairId = localStorage.getItem('pairId') || '';\n    if (!pairId || !db) return 'home';\n    \n    if (authReady) await authReady;\n    if (!auth?.currentUser) return 'home';\n    \n    const { doc, getDoc } = await import('firebase/firestore');\n    const snap = await getDoc(doc(db, 'pairs', pairId, 'mapState', 'current'));\n    \n    if (snap.exists()) {\n      const data = snap.data();\n      return data.state || 'home';\n    }\n    \n    return 'home';\n  } catch (e) {\n    console.error('Error getting map state:', e);\n    return localStorage.getItem('mapState') || 'home';\n  }\n}\n\nexport async function setMapState(state) {\n  try {\n    // Save locally first\n    localStorage.setItem('mapState', state);\n    \n    const pairId = localStorage.getItem('pairId') || '';\n    if (!pairId || !db) return;\n    \n    if (authReady) await authReady;\n    if (!auth?.currentUser) return;\n    \n    const { doc, setDoc, serverTimestamp } = await import('firebase/firestore');\n    await setDoc(\n      doc(db, 'pairs', pairId, 'mapState', 'current'),\n      {\n        state,\n        updatedAt: serverTimestamp(),\n        updatedBy: auth.currentUser.uid\n      },\n      { merge: true }\n    );\n  } catch (e) {\n    console.error('Error setting map state:', e);\n    // Still save locally even if Firestore fails\n    localStorage.setItem('mapState', state);\n  }\n}\n\nexport function subscribeToMapState(callback) {\n  let unsubscribe = () => {};\n  \n  (async () => {\n    try {\n      const pairId = localStorage.getItem('pairId') || '';\n      if (!pairId || !db) return;\n      \n      if (authReady) await authReady;\n      if (!auth?.currentUser) return;\n      \n      const { doc, onSnapshot } = await import('firebase/firestore');\n      unsubscribe = onSnapshot(\n        doc(db, 'pairs', pairId, 'mapState', 'current'),\n        (snap) => {\n          if (snap.exists()) {\n            const data = snap.data();\n            const state = data.state || 'home';\n            localStorage.setItem('mapState', state);\n            callback(state);\n          }\n        },\n        (error) => {\n          console.error('Error listening to map state:', error);\n        }\n      );\n    } catch (e) {\n      console.error('Error subscribing to map state:', e);\n    }\n  })();\n  \n  return () => unsubscribe();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}